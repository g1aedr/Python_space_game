# Server-side implementation of the game logic using Flask
from flask import Flask, request, jsonify
import math
import uuid

app = Flask(__name__)

ships = {}
bullets = []

class Ship:
    def __init__(self, ship_id):
        self.id = ship_id
        self.x = 0
        self.y = 0
        self.angle = 0
        self.velocity_x = 0
        self.velocity_y = 0
        self.acceleration = 0.2
        self.max_speed = 5
        self.health = 100

    def to_dict(self):
        return {
            'id': self.id,
            'x': self.x,
            'y': self.y,
            'angle': self.angle,
            'velocity_x': self.velocity_x,
            'velocity_y': self.velocity_y,
            'health': self.health
        }

    def rotate(self, direction):
        self.angle += direction * 4

    def thrust(self):
        self.velocity_x += self.acceleration * math.cos(math.radians(self.angle))
        self.velocity_y += self.acceleration * math.sin(math.radians(self.angle))
        speed = math.hypot(self.velocity_x, self.velocity_y)
        if speed > self.max_speed:
            scale = self.max_speed / speed
            self.velocity_x *= scale
            self.velocity_y *= scale

    def update(self):
        self.x += self.velocity_x
        self.y += self.velocity_y
        self.velocity_x *= 0.99
        self.velocity_y *= 0.99

class Bullet:
    def __init__(self, x, y, angle, owner_id):
        self.x = x
        self.y = y
        self.speed = 8
        self.angle = angle
        self.owner_id = owner_id
        self.active = True

    def update(self):
        self.x += self.speed * math.cos(math.radians(self.angle))
        self.y += self.speed * math.sin(math.radians(self.angle))

@app.route('/spawn', methods=['POST'])
def spawn():
    ship_id = str(uuid.uuid4())
    ships[ship_id] = Ship(ship_id)
    return jsonify({'ship_id': ship_id})

@app.route('/rotate', methods=['POST'])
def rotate():
    data = request.get_json()
    ship = ships.get(data['ship_id'])
    if ship:
        ship.rotate(data['direction'])
    return '', 204

@app.route('/thrust', methods=['POST'])
def thrust():
    data = request.get_json()
    ship = ships.get(data['ship_id'])
    if ship:
        ship.thrust()
    return '', 204

@app.route('/shoot', methods=['POST'])
def shoot():
    data = request.get_json()
    ship = ships.get(data['ship_id'])
    if ship:
        bullets.append(Bullet(ship.x, ship.y, ship.angle, ship.id))
    return '', 204

@app.route('/tick', methods=['POST'])
def tick():
    for ship in ships.values():
        ship.update()
    for bullet in bullets:
        bullet.update()
    return '', 204

@app.route('/status/<ship_id>', methods=['GET'])
def status(ship_id):
    ship = ships.get(ship_id)
    if ship:
        return jsonify(ship.to_dict())
    return jsonify({'error': 'Ship not found'}), 404

if __name__ == '__main__':
    app.run(debug=True)

